#!/usr/bin/python
# -*- coding: utf-8 -*-

#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Jun 07, 2018 11:09:33 PM

import sys

try:
    from Tkinter import *
    from tkinter import filedialog
    from PIL import PhotoImage
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''

    global val, w, root
    root = Tk()
    top = New_Toplevel(root)
    main_support.init(root, top)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''

    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font11 = \
            '-family eufm10 -size 20 -weight normal -slant roman -underline 0 -overstrike 0'
        font9 = \
            '-family {DejaVu Sans} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'
        self.style = ttk.Style()
        if sys.platform == 'win32':
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font='TkDefaultFont')
        self.style.map('.', background=[('selected', _compcolor),
                       ('active', _ana2color)])

        top.geometry('600x450+426+166')
        top.title('New Toplevel')
        top.configure(cursor='arrow')

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.05, rely=0.09, relheight=0.17,
                          relwidth=0.93)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth='2')
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(width=555)

        self.Message1 = Message(self.Frame1)
        self.Message1.place(relx=0.11, rely=0.4, relheight=0.33,
                            relwidth=0.81)
        self.Message1.configure(font=font11)
        self.Message1.configure(text='''Audio to Gender Classification'''
                                )
        self.Message1.configure(width=452)

        self.TButton1 = ttk.Button(top)
        self.TButton1.place(relx=0.08, rely=0.56, height=68, width=243)
        self.TButton1.configure(takefocus='')
        self.TButton1.configure(text='''Select audio File''')
        self.TButton1.configure(width=243)
        self.TButton1.bind('<Button-1>', lambda e: \
                           main_support.btnSel_LeftClick(e))

        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.57, rely=0.36, relheight=0.46,
                               relwidth=0.4)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''OutPut''')
        self.Labelframe1.configure(width=240)

        self.Text1 = Text(self.Labelframe1)
        self.Text1.place(
            relx=0.08,
            rely=0.24,
            relheight=0.57,
            relwidth=0.82,
            y=-13,
            h=13,
            )
        self.Text1.configure(background='white')
        self.Text1.configure(font=font9)
        self.Text1.insert(END, '''Just a text Widget
in two lines
''')
        self.Text1.configure(selectbackground='#c4c4c4')
        self.Text1.configure(width=196)
        self.Text1.configure(wrap=WORD)

        self.BtnExit = Button(top)
        self.BtnExit.place(relx=0.45, rely=0.91, height=29, width=51)
        self.BtnExit.configure(activebackground='#d9d9d9')
        self.BtnExit.configure(text='''Exit''')
        self.BtnExit.bind('<Button-1>', lambda e: \
                          main_support.btnExit_LeftClick(e))

    @staticmethod
    def popup1(event):
        Popupmenu1 = Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground='#f9f9f9')
        Popupmenu1.post(event.x_root, event.y_root)


if __name__ == '__main__':
    vp_start_gui()


			
